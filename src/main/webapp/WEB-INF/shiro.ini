[main]
##creating the realm
jdbcRealm=org.apache.shiro.realm.jdbc.JdbcRealm
jdbcRealm.permissionsLookupEnabled = true
jdbcRealm.authenticationQuery = SELECT password FROM users WHERE username = ?
jdbcRealm.userRolesQuery = SELECT rolename FROM userroles WHERE username = ?
jdbcRealm.permissionsQuery = SELECT permission FROM rolepermissions WHERE roleid=(SELECT roleid from roles where rolename= ? )

##connection pooling and database access through apache commons dbcp
ds = org.apache.commons.dbcp.BasicDataSource
ds.driverClassName = com.mysql.jdbc.Driver
ds.username =jeni
ds.password =jeni123
ds.url = jdbc:mysql://localhost:3306/personcontactsdb
               
##adding the data source to the realm earlier configured
jdbcRealm.dataSource = $ds

##password encryption is done by sha256 encryption algorithm provided by shiro api
sha1Matcher = org.apache.shiro.authc.credential.Sha1CredentialsMatcher
jdbcRealm.credentialsMatcher = $sha1Matcher

##configuring security manager to use the realm configured earlier
securityManager.realms=$jdbcRealm
			   
##Caching mechanism is dome by a third party chaching api called ehcache
##adding the chaching support to the security manager
cacheManager = org.apache.shiro.cache.ehcache.EhCacheManager
securityManager.cacheManager = $cacheManager 

[filters]
shiro.loginUrl = /login
roles.unauthorizedUrl = /unauthorized
perms.unauthorizedUrl = /unauthorized

##url section is used to set permissions to specific urls
[urls]               
/theme/** = anon    
/resource/**=anon           
/view/html/scripts/**=anon
/view/html/menu/**=anon
/login/** = anon	
/login.jsp = authc
/** = authc

